import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JPanel;
 

public class Connect4 extends JFrame {
    
   
   //Tên và h?ng s? trong ô
    public static final int EMPTY = 0;  
    public static final int PLAYER1 = 1;  
    public static final int PLAYER2 = 2;  
   
    //Ð?i trò choi 
    public static final int PLAYING = 0;  
   
    // B?ng trò choi
 
    public int currentState = 1;  // Xác d?nh tr?ng thái hi?n t?i c?a trò choi, 1 d? b?t d?u trò choi m?i 
    public int currentPlayer; // Xác nh?n ngu?i choi 1 hay 2  
    public int Rows = 7, Columns = 8, AmountToWin = 4;  
    public int[][] board = new int[Rows][Columns];  
    public Scanner input = new Scanner(System.in); // d?u vào 
    MouseAdapter me;
    ArcsPanel[][] arcs;
   
   //------------------------------------------------------------
    public static void main(String[] args) {  
        // Kh?i d?ng trò choi và tình tr?ng hi?n t?i
        new Connect4();
    } 
   
 
    public Connect4(){  
       initGame();
       arcs = new ArcsPanel[Rows][Columns];
       me = new MouseAdapter() {
          @Override
          public void mouseClicked(MouseEvent me) {
             ArcsPanel panel = (ArcsPanel) me.getSource();
             int y = panel.column;
             int x = availableRow(y);
             if (x == -1) return;
              
             board[x][y] = currentPlayer;
             if (currentPlayer == PLAYER1) currentPlayer = PLAYER2;
             else currentPlayer = PLAYER1; 
             arcs[x][y].repaint();
             checkForResult(x, y);
          }
       };
       JPanel p1 = new JPanel();  
       p1.setLayout(new GridLayout(Rows, Columns)); 
   
       for (int i=0; i<Rows; i++) { 
           for (int j = 0; j < Columns; j++) {
              arcs[i][j] = new ArcsPanel(i, j);
              p1.add(arcs[i][j]);  
              arcs[i][j].addMouseListener(me);
           }
       }  
       add(p1, BorderLayout.CENTER); 
         
       this.pack();
       this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.setLocationRelativeTo(null);
       this.setVisible(true);
    } 
     
   //------------------------------------------------------------
    public void initGame() {       
        for (int row = 0; row < Rows; ++row) {  
            for (int col = 0; col < Columns; ++col) {  
                board[row][col] = EMPTY;  // ô tr?ng
            }  
        }  
        currentState = PLAYING; // chu?n b? choi  
        currentPlayer = PLAYER1;  // ngu?i choi 1 choi tru?c  
    }  
     
    private void checkForResult(int row, int col) {
    
    }
     
  
    public int availableRow(int col){   
        for( int row = Rows -1; row >= 0; row--){  
            if(board[row][col] == EMPTY){  
                return row;              
            }  
        }
        return -1;    
    }    
     
    class ArcsPanel extends JPanel {   
       int row, column;
       public ArcsPanel(int r, int c) {
          row = r;
          column = c;
          this.setBackground(Color.BLACK);
          this.setPreferredSize(new Dimension(100, 100));  // try commenting out this line!
       }
   
       
       public void paintComponent(Graphics g) {  
            super.paintComponent(g);  
            Color c = 
                board[row][column] == EMPTY   ? Color.WHITE :
                board[row][column] == PLAYER1 ? Color.RED   :
                                                Color.GREEN;
            g.setColor(c);
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.fillOval(10, 10, 90, 90);  
            g2d.dispose();
        }  
    } 
} 